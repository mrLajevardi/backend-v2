import { AbilityFactory } from './ability.factory';
import { Invoices } from 'src/infrastructure/database/entities/Invoices';
import { Test, TestingModule } from '@nestjs/testing';
import { DatabaseModule } from 'src/infrastructure/database/database.module';
import { User } from 'src/infrastructure/database/entities/User';
import { ACLTableService } from '../../crud/acl-table/acl-table.service';
import { UserTableService } from '../../crud/user-table/user-table.service';
import { Action } from './enum/action.enum';
import { CrudModule } from '../../crud/crud.module';
import { InvoicesModule } from '../../invoice/invoices.module';

describe('AbilityFactory', () => {
  let abilityFactory: AbilityFactory;
  let userTable: UserTableService;
  let aclTable: ACLTableService;
  let module: TestingModule;

  beforeAll(async () => {
    module = await Test.createTestingModule({
      imports: [DatabaseModule, CrudModule, InvoicesModule],
      providers: [AbilityFactory],
    }).compile();

    abilityFactory = module.get<AbilityFactory>(AbilityFactory);
    userTable = module.get<UserTableService>(UserTableService);
    aclTable = module.get<ACLTableService>(ACLTableService);
  });

  // describe('Generic Access Tests, that are not based on specific user ', () => {
  //   beforeAll(async () => {
  //     const user = new User();
  //     user.id = 1;
  //     user.name = 'majid1';
  //     user.family = 'ziaei';
  //     user.username = 'majid1';
  //     user.password = '123';
  //     user.createDate = new Date();
  //     user.updateDate = new Date();
  //     await userTable.create(user);
  //     user.id = 2;
  //     await userTable.create(user);
  //     await await aclTable.deleteAll({});
  //     await aclTable.create({
  //       model: 'Acl',
  //       accessType: 'read',
  //       principalType: '',
  //       principalId: '',
  //       property: '',
  //       permission: 'can',
  //     });
  //     await aclTable.create({
  //       model: 'User',
  //       accessType: 'read',
  //       principalType: '',
  //       principalId: '',
  //       property: 'id',
  //       permission: 'cannot',
  //     });
  //     await aclTable.create({
  //       model: 'User',
  //       accessType: 'read',
  //       principalType: '',
  //       principalId: '',
  //       property: "'name'",
  //       permission: 'can',
  //     });
  //   });
  //   afterAll(() => {
  //     userTable.deleteAll();
  //     aclTable.deleteAll({});
  //   });
  //   it('should return 2 for users.getAll', async () => {
  //     const users = await userTable.find();
  //     expect(users.length).toBe(2);
  //   });
  //   it('should return 2 for acl.getAll', async () => {
  //     const acls = await aclTable.find();
  //     //console.log(acls.length);
  //     expect(acls.length).toBe(3);
  //   });
  //   // Generic Access: check single read permission on all of Acl table
  //   it('should return true', async () => {
  //     const user1 = await userTable.findById(1);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const result = ability.can(Action.Read, 'Acl');
  //     expect(result).toBeTruthy();
  //   });
  //   // Generic Access:  check access to one field of Acl
  //   it('should return false', async () => {
  //     const user1 = await userTable.findById(1);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const result = ability.can(Action.Read, 'User', 'id');
  //     expect(result).toBeFalsy();
  //   });
  //   // Generic Access:  check access to one field of User
  //   it('should return true', async () => {
  //     const user1 = await userTable.findById(1);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const result = ability.can(Action.Read, 'User', 'name');
  //     expect(result).toBeTruthy();
  //   });
  // });
  // describe('User specific access ', () => {
  //   beforeAll(async () => {
  //     const user = new User();
  //     user.id = 1;
  //     user.name = 'majid1';
  //     user.family = 'ziaei';
  //     user.username = 'majid1';
  //     user.password = '123';
  //     user.createDate = new Date();
  //     user.updateDate = new Date();
  //     await userTable.create(user);
  //     user.id = 2;
  //     await userTable.create(user);
  //     await aclTable.create({
  //       model: 'Acl',
  //       accessType: 'read',
  //       principalType: 'User',
  //       principalId: '1',
  //       property: '',
  //       permission: 'can',
  //     });
  //     await aclTable.create({
  //       model: 'User',
  //       accessType: 'read',
  //       principalType: 'User',
  //       principalId: '1',
  //       property: '',
  //       permission: 'cannot',
  //     });
  //     await aclTable.create({
  //       model: 'User',
  //       accessType: 'read',
  //       principalType: 'User',
  //       principalId: '2',
  //       property: '',
  //       permission: 'can',
  //     });
  //   });
  //   afterAll(async () => {
  //     await userTable.deleteAll();
  //     await aclTable.deleteAll({});
  //   });
  //   it('should return 2 for users.getAll', async () => {
  //     const users = await userTable.find();
  //     expect(users.length).toBe(2);
  //   });
  //   it('should return 3 for acl.getAll', async () => {
  //     const acls = await aclTable.find();
  //     // console.log(acls);
  //     expect(acls.length).toBe(3);
  //   });
  //   // access of user 1 to read the Acl
  //   it('should return true', async () => {
  //     const user1 = await userTable.findById(1);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const result = ability.can(Action.Read, 'Acl');
  //     expect(result).toBeTruthy();
  //   });
  //   // access of user 2 to read the Acl
  //   it('should return false', async () => {
  //     const user2 = await userTable.findById(2);
  //     const ability = await abilityFactory.createForUser(user2);
  //     console.log(ability.rulesFor(Action.Read, 'Acl'));
  //     const result = ability.can(Action.Read, 'Acl');
  //     // console.log(ability.rules);
  //     expect(result).toBeFalsy();
  //   });
  //   // access of user 2 to read the User
  //   it('should return true', async () => {
  //     const user2 = await userTable.findById(2);
  //     const ability = await abilityFactory.createForUser(user2);
  //     const result = ability.can(Action.Read, user2);
  //     expect(result).toBeTruthy();
  //   });
  // });
  // describe('User specific access with Query  ', () => {
  //   beforeAll(async () => {
  //     const user = new User();
  //     user.id = 1;
  //     user.name = 'majid1';
  //     user.family = 'ziaei';
  //     user.username = 'majid1';
  //     user.password = '123';
  //     user.createDate = new Date();
  //     user.updateDate = new Date();
  //     await userTable.create(user);
  //     user.id = 2;
  //     await userTable.create(user);
  //     await aclTable.create({
  //       model: 'Invoices',
  //       accessType: 'read',
  //       principalType: 'User',
  //       principalId: '1',
  //       property: "{ 'user' : user }",
  //       permission: 'can',
  //     });
  //   });
  //   afterAll(async () => {
  //     await userTable.deleteAll();
  //     await aclTable.deleteAll({});
  //   });
  //   // user 1 access to invoice of user 1
  //   it('should return true', async () => {
  //     const user1 = await userTable.findById(1);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const invoice = new Invoices();
  //     invoice.id = 1;
  //     invoice.user = user1;
  //     const result = ability.can(Action.Read, invoice);
  //     expect(result).toBeTruthy();
  //   });
  //   // user 1 access to invoice of user 2
  //   it('should return false', async () => {
  //     const user1 = await userTable.findById(1);
  //     const user2 = await userTable.findById(2);
  //     const ability = await abilityFactory.createForUser(user1);
  //     const invoice = new Invoices();
  //     invoice.user = user1;
  //     invoice.id = 1;
  //     invoice.name = 'test';
  //     const result = ability.can(Action.Read, user2);
  //     expect(result).toBeFalsy();
  //   });
  // });
  // describe('checking error states', () => {
  //   // no rules in acl table
  //   it('should return 0 ', async () => {
  //     const result = await aclTable.find();
  //     expect(result.length).toBe(0);
  //   });
  //   // no user defined
  //   it('should return 0', async () => {
  //     const result = await userTable.find();
  //     expect(result.length).toBe(0);
  //   });
  //   // If user is null
  //   it('should not throw exceptions', async () => {
  //     let err = undefined;
  //     try {
  //       const ability = await abilityFactory.createForUser(null);
  //       ability.can(Action.Create, 'Acl');
  //     } catch (error) {
  //       err = error;
  //     }
  //     expect(err).toBeUndefined();
  //   });
  //   // If user has no ID
  //   it('should not throw exceptions', async () => {
  //     let err = undefined;
  //     try {
  //       const user = new User();
  //       user.id = 100100;
  //       user.name = 'test';
  //       const ability = await abilityFactory.createForUser(user);
  //       ability.can(Action.Create, 'Acl');
  //     } catch (error) {
  //       err = error;
  //       console.log(err);
  //     }
  //     expect(err).toBeUndefined();
  //   });
  //   // If acl is null
  //   it('should not throw exceptions', async () => {
  //     let err = undefined;
  //     try {
  //       const ability = await abilityFactory.createForUser(null);
  //       ability.can(Action.Create, null);
  //     } catch (error) {
  //       err = error;
  //     }
  //     expect(err).toBeUndefined();
  //   });
  // });
  // describe('Some complicated scenarios', () => {
  //   let inv1: Invoices;
  //   let inv2: Invoices;
  //   let user: User;
  //   beforeAll(async () => {
  //     user = new User();
  //     user.id = 1;
  //     user.name = 'majid';
  //     inv1 = new Invoices();
  //     inv2 = new Invoices();
  //     inv1.user = user;
  //     inv2.user = user;
  //     inv1.name = 'test1';
  //     inv2.name = 'test2';
  //     inv1.payed = false;
  //     inv2.payed = true;
  //   });
  //   describe('User can see only his not payed invoices, so ', () => {
  //     beforeAll(async () => {
  //       await aclTable.create({
  //         model: 'Invoices',
  //         accessType: 'read',
  //         principalType: '',
  //         principalId: '',
  //         property: '{ "payed" : false , "user": user } ',
  //         permission: 'can',
  //       });
  //     });
  //     it('should return true for inv1', async () => {
  //       const ability = await abilityFactory.createForUser(user);
  //       expect(ability.can(Action.Read, inv1)).toBeTruthy();
  //     });
  //     it('should return false for inv2', async () => {
  //       const ability = await abilityFactory.createForUser(user);
  //       expect(ability.can(Action.Read, inv2)).toBeFalsy();
  //     });
  //   });
  // });
});
