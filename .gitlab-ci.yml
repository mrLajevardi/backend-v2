stages:     # List of stages for jobs, and their order of execution
  - test
  - build
  - publish
  - deploy
variables:
  IMAGE_NAME: $CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
  IMAGE_FULLPATH: $CI_REGISTRY/$IMAGE_NAME

.job-cache:
  cache:  # Cache modules in between jobs
    key: 
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline
    
unit-test-job:   # This job runs in the test stage.
  stage: test 
  needs: []
  extends:
    - .job-cache
  only:
    - develop
    - merge_requests
    # - main
  script:
    - npm run test
  dependencies: []
  artifacts:
    when: always
    paths:
      - jest-junit.xml
    reports:
      junit: jest-junit.xml
    expire_in: 1 day  

lint-test-job:
  stage: test
  needs: []
  extends:
    - .job-cache
  only:
    - develop
    # - main
    - merge_requests
  dependencies: []
  script:
    - npm run lint
  artifacts:
    when: always
    paths:
      - eslint-junit.xml
    reports:
      junit: eslint-junit.xml
    expire_in: 1 day


build develop image:
  image: docker
  stage: publish
  only:
    - develop
  tags:
    - dev
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    # - echo "$MY_PASSWORD" | docker login -u "$MY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - echo "$CI_REGISTRY_IMAGE"
    - cp /var/services/configs/.env ./ -f
    - docker build . --tag "$CI_REGISTRY/$IMAGE_NAME"
    # - echo "$CI_REGISTRY_USER" "$CI_REGISTRY_IMAGE"
    # - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker push "$CI_REGISTRY/$IMAGE_NAME"

deploy develop image:
  stage: deploy
  only:
    - develop
  services:
    - docker:dind
  tags:
    - dev
  before_script:
    - export IMAGE_NAME="$IMAGE_NAME"
  script:
    - cp /var/services/configs/.env ./ -f
    - cp /var/services/sa_password.txt ./ -f
    - cat ./sa_password.txt
    - cat .env
    - export IMAGE_NAME=${IMAGE_FULLPATH}
    - echo $IMAGE_NAME
    - docker compose up -d




#develop server deploy job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  only:
#    - develop
#    # - main
#  dependencies: []
#  script:
#    - .\deploy.ps1

# test server deploy job:
#   stage: deploy
#   tags: 
#    - release
#   only:
#     - release
#   dependencies: []
#   script: 
#     - sh deploy.sh

build release image:
  image: docker
  stage: publish
  only: 
   - release
  tags:
    - qa
  services:
    - docker:dind
  before_script: 
    - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    # - echo "$MY_PASSWORD" | docker login -u "$MY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - echo "$CI_REGISTRY_IMAGE"
    - cp /var/services/configs/.env ./ -f
    - docker build . --tag "$CI_REGISTRY/$IMAGE_NAME"
    # - echo "$CI_REGISTRY_USER" "$CI_REGISTRY_IMAGE"
    # - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker push "$CI_REGISTRY/$IMAGE_NAME"

deploy release image:
  stage: deploy
  only: 
   - release
  services:
    - docker:dind
  tags:
    - qa
  before_script:
    - export IMAGE_NAME="$IMAGE_NAME"
  script:
    - cp /var/services/configs/.env ./ -f
    - cp /var/services/sa_password.txt ./ -f
    - cat ./sa_password.txt
    - cat .env
    - export IMAGE_NAME=${IMAGE_FULLPATH}
    - echo $IMAGE_NAME 
    - docker compose up -d





build prod image:
  image: docker
  stage: publish
  parallel:
    matrix:
      - RUNNER: amin
      - RUNNER: asia
  only: 
   - main
  tags:
    - ${RUNNER}
  services:
    - docker:dind
  before_script: 
    - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    # - echo "$MY_PASSWORD" | docker login -u "$MY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - echo "$CI_REGISTRY_IMAGE"
    - cp /var/services/configs/.env ./ -f
    - cp /var/services/configs/vcdConfig.ts ./src/wrappers/mainWrapper/vcdConfig.ts -f
    - cp /var/services/configs/vcdAuthConfig.ts ./src/wrappers/mainWrapper/vcdAuthConfig.ts -f
    - cp /var/services/vcdConfig.ts ./src/wrappers/main-wrapper/vcdConfig.ts -f
    - docker build . --tag "$CI_REGISTRY/$IMAGE_NAME"
    # - echo "$CI_REGISTRY_USER" "$CI_REGISTRY_IMAGE"
    # - echo "$CI_REGISTRY_PASSWORD" |docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker push "$CI_REGISTRY/$IMAGE_NAME"

deploy prod image:
  stage: deploy
  parallel:
    matrix:
      - RUNNER: amin
      - RUNNER: asia
  only: 
   - main
  services:
    - docker:dind
  tags:
    - ${RUNNER}
  before_script:
    - export IMAGE_NAME="$IMAGE_NAME"
  script:
    - cp /var/services/configs/.env ./ -f
    - cp /var/services/sa_password.txt ./ -f
    - cat ./sa_password.txt
    - cat .env
    - export IMAGE_NAME=${IMAGE_FULLPATH}
    - echo $IMAGE_NAME 
    - docker compose up -d